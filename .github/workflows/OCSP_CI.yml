name: Continuous Integration

on:
  push:
    paths:
      - 'src/**'
      - 'package.json'
      - 'yarn.lock'
      - 'Dockerfile'
      - 'tsconfig.json'

  pull_request:
    paths:
      - 'src/**'
      - 'package.json'
      - 'yarn.lock'
      - 'Dockerfile'
      - 'tsconfig.json'

env:
  SUBSCRIPTION_CODE: gcspre
  APP_CODE: lacmn
  ENV_NAME: dev

jobs:
  sanity_check_job:
    runs-on: ubuntu-latest
    environment:
      name: "gcspre"
    name: ss-base-ocsp-check   
    steps:    
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: false
  
    - name: Get current date
      id: date
      run: |
        export TZ="Asia/Kolkata"
        echo "::set-output name=date::$(date +'%Y-%m-%d_%H-%M-%S')"

    - name: Check Out Code
      uses: actions/checkout@v2

    - name: Set Github Action Environment Variables
      run: |
        IPAddr=$(curl -s https://checkip.amazonaws.com)
        ACCOUT_SHOW_RESULT=$(az account show)
        SUBSCRIPTION_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .id)"
        TENANT_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .homeTenantId)"
        KEY_VAULT_RESOURCE_GROUP_NAME="rg-${{ env.SUBSCRIPTION_CODE }}-${{ env.ENV_NAME }}-${{ env.APP_CODE }}-kv"
        KEY_VAULT_ID=$(
          az resource list \
            --subscription ${SUBSCRIPTION_ID} \
            --resource-group ${KEY_VAULT_RESOURCE_GROUP_NAME} \
            --resource-type "Microsoft.KeyVault/vaults" \
            | jq -r .[0].id \
        )
        KEY_VAULT_NAME=$(basename ${KEY_VAULT_ID})

        echo "IPAddr=${IPAddr}" >> $GITHUB_ENV
        echo "SUBSCRIPTION_ID=${SUBSCRIPTION_ID}" >> $GITHUB_ENV
        echo "TENANT_ID=${TENANT_ID}" >> $GITHUB_ENV
        echo "KEY_VAULT_RESOURCE_GROUP_NAME=${KEY_VAULT_RESOURCE_GROUP_NAME}" >> $GITHUB_ENV
        echo "KEY_VAULT_ID=${KEY_VAULT_ID}" >> $GITHUB_ENV
        echo "KEY_VAULT_NAME=${KEY_VAULT_NAME}" >> $GITHUB_ENV

    - name: Key Vault Firewall Setting
      run: |
        bash ./.github/scripts/add-ip-to-key-vault-network-rule.sh \
          "${{ env.IPAddr }}" \
          "${{ env.SUBSCRIPTION_ID }}" \
          "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"

    - name: Fetch secrets from KeyVault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEY_VAULT_NAME }}
        secrets: 'sp-ocsp-appId, sp-ocsp-password'        
      id: fetchFromKeyVault

    - name: Set Variables for Docker Compose
      run: |
        # Added as part of unit test case resolution
        sed -i -e "s/\${KEY_VAULT_NAME_REPLACED_BY_GITHUBACTION}/${{ env.KEY_VAULT_NAME }}/" docker-compose.yml
        sed -i -e "s/\${AZURE_CLIENT_ID_REPLACED_BY_GITHUBACTION}/${{ steps.fetchFromKeyVault.outputs.sp-ocsp-appId }}/" docker-compose.yml
        sed -i -e "s/\${AZURE_CLIENT_SECRET_REPLACED_BY_GITHUBACTION}/${{ steps.fetchFromKeyVault.outputs.sp-ocsp-password }}/" docker-compose.yml
        sed -i -e "s/\${AZURE_TENANT_ID_REPLACED_BY_GITHUBACTION}/${{ env.TENANT_ID }}/" docker-compose.yml
        docker-compose up --build -d

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tavern
        pip install -r ./PythonRequire.txt

    - run: docker-compose exec -T web yarn schema:mockDB
            
    - name: Compile and Lint actions
      run: |
        sudo docker-compose exec -T web yarn tsc --noEmit
        sudo docker-compose exec -T web yarn lint

    - name: Unit Test and coverage
      run: |
        sudo docker-compose exec -T web yarn coverage

    - name: Archive code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report-${{ steps.date.outputs.date }}
        path: coverage/

    - name: Check license
      run: |
        docker-compose exec -T web yarn audit
        docker-compose exec -T web yarn license-checker --production --unknown --csv --out oss/licenses.csv
    
    - name: Archive oss list artifact
      uses: actions/upload-artifact@v2
      with:
        name: oss-${{ steps.date.outputs.date }}-${{ github.sha }}
        path: oss/
    
    # Construct Failure Message
    - if: failure()
      name: create failure message
      run: |
        MESSAGE="Continuous Integration Workflow Execution Failed :red_circle: "
        echo "RESULT_MESSAGE=${MESSAGE}" >> $GITHUB_ENV
    
    # Construct Success Message
    - if: success()
      name: create success message
      run: |
        MESSAGE="Continuous Integration Workflow executed Successfully :white_check_mark: "
        echo "RESULT_MESSAGE=${MESSAGE}" >> $GITHUB_ENV

    - name: Remove My IP From Key Vault Network Role
      if: ${{ always() }}
      run: |
        bash ./.github/scripts/remove-ip-from-key-vault-network-rule.sh \
          "${{ env.IPAddr }}" \
          "${{ env.SUBSCRIPTION_ID }}" \
          "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"

    # Notification Push to Slack
    - name: Post to slack
      if: always()
      uses: tokorom/action-slack-incoming-webhook@master
      env:
        INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
          text: "*${{ env.RESULT_MESSAGE }}* [${{ github.repository }}] @ ${{ github.event_name }}"
          attachments: |
            [
              {
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Compare URL",
                    "value": "${{ github.event.compare }}"
                  }
                ]
              }
            ]