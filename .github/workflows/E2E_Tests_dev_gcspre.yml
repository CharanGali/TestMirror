name: (GCSPRE_DEV) OCSP-E2E-Tests
on:
  workflow_run:
    workflows:
      - (GCSPRE_DEV) Create OCSP for SmartCamera
    types:
      - completed

# Set Environment Variables
env:
  APP_CODE: lacmn
  SUBSCRIPTION_CODE: gcspre
  REGION_CODE: japaneast
  ENV_NAME: dev

jobs:
  test_case_execution:
    runs-on: ubuntu-latest
    environment:
      name: gcspre
    name: test_case_execution
    steps:    
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: false

    - name: Get current date
      id: date
      run: |
        export TZ="Asia/Kolkata"
        echo "::set-output name=date::$(date +'%Y-%m-%d_%H-%M-%S')"

    - name: Check Out Code
      uses: actions/checkout@v2
    
    - name: Set python env
      uses: actions/setup-python@v2
      with:
        python-version: '3.7.8'

    - name: Set node env
      uses: actions/setup-node@v2
      with:
        node-version: '12'
      
    - name: Set Github Action Environment Variables
      run: |
        IPAddr=$(curl -s https://checkip.amazonaws.com)
        ACCOUT_SHOW_RESULT=$(az account show)
        SUBSCRIPTION_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .id)"
        TENANT_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .homeTenantId)"
        KEY_VAULT_RESOURCE_GROUP_NAME="rg-${{ env.SUBSCRIPTION_CODE }}-${{ env.ENV_NAME }}-${{ env.APP_CODE }}-kv"
        WAF_RESOURCE_GROUP_NAME="rg-${{ env.SUBSCRIPTION_CODE }}-${{ env.ENV_NAME }}-${{ env.APP_CODE }}-wgf"
        WAF_POLICY_NAME="wgf${{ env.SUBSCRIPTION_CODE }}${{ env.ENV_NAME }}${{ env.APP_CODE }}dpswaf${{ env.REGION_CODE }}"
        KEY_VAULT_ID=$(
          az resource list \
            --subscription ${SUBSCRIPTION_ID} \
            --resource-group ${KEY_VAULT_RESOURCE_GROUP_NAME} \
            --resource-type "Microsoft.KeyVault/vaults" \
            | jq -r .[0].id \
        )
        KEY_VAULT_NAME=$(basename ${KEY_VAULT_ID})
        echo "IPAddr=${IPAddr}" >> $GITHUB_ENV
        echo "SUBSCRIPTION_ID=${SUBSCRIPTION_ID}" >> $GITHUB_ENV
        echo "TENANT_ID=${TENANT_ID}" >> $GITHUB_ENV
        echo "KEY_VAULT_RESOURCE_GROUP_NAME=${KEY_VAULT_RESOURCE_GROUP_NAME}" >> $GITHUB_ENV
        echo "WAF_RESOURCE_GROUP_NAME=${WAF_RESOURCE_GROUP_NAME}" >> $GITHUB_ENV
        echo "WAF_POLICY_NAME=${WAF_POLICY_NAME}" >> $GITHUB_ENV
        echo "KEY_VAULT_ID=${KEY_VAULT_ID}" >> $GITHUB_ENV
        echo "KEY_VAULT_NAME=${KEY_VAULT_NAME}" >> $GITHUB_ENV

    - name: Key Vault Firewall Setting
      run: |
        bash ./.github/scripts/add-ip-to-key-vault-network-rule.sh \
          "${{ env.IPAddr }}" \
          "${{ env.SUBSCRIPTION_ID }}" \
          "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"

    - name: Add WAF Policy Setting
      run: |
        bash ./.github/scripts/add-custom-rule-to-waf.sh \
          "${{ env.IPAddr }}" \
          "${{ env.SUBSCRIPTION_ID }}" \
          "${{ env.WAF_RESOURCE_GROUP_NAME }}" \
          "${{ env.WAF_POLICY_NAME }}"

    - name: Install dependencies
      run: |
        cd src
        python -m pip install --upgrade pip
        pip install -r ./e2e-test/requirement.txt
        sudo pip install html-testRunner
        sudo npm install
        sudo npm install -g ts-node
    
    # Execute tests
    - name: Run E2E Tests
      run: |
        # Update Variables in related files
        sed -i -e "s/\${KEY_VAULT_NAME_REPLACED_BY_GITHUBACTION}/${{ env.KEY_VAULT_NAME }}/" docker-compose.yml
        
        cd src
        sed -i -e "s/\${GITHUBACTION_KVNAME}/${{ env.KEY_VAULT_NAME }}/" ./e2e-test/scenario/utils/keyVault.ts
        cd e2e-test
        bash ./exec-test.sh
    
    # Displays Outcome of each test case based on results
    - name: Analyse the result
      run: |
        for file in ./src/e2e-test/scenario/result/*.json
        do
          content=`cat $file`
          outcome=`echo $(jq -r '.outcome' <<< "$content")`
          if [[ $outcome == *failed* ]]; then
            echo "Test cases failed for $file" >> ./src/e2e-test/scenario/result/Notify.txt 
            FAIL_NOTIFY="TRUE"
            echo "FAIL_NOTIFY=${FAIL_NOTIFY}" >> $GITHUB_ENV
          else
            echo "Test cases passed for $file" >> ./src/e2e-test/scenario/result/Notify.txt
          fi
        done

    # Archive the Artifacts
    - name: Archive Artifacts
      uses: actions/upload-artifact@master
      with:
        name: gcspre-dev-e2e-ocsp-test-report-${{ steps.date.outputs.date }}
        path: |
          src/e2e-test/scenario/result/Notify.txt
          src/e2e-test/scenario/request
          src/e2e-test/scenario/response

    # Construct Slack Success Message
    - if: success()
      name: create Slack success message
      run: |
        MESSAGE="OCSP E2E Tests Execution Completed for GCSPRE_DEV :white_check_mark: "
        CMESSAGE="Please check the artifacts in workflow run"
        echo "RESULT_MESSAGE=${MESSAGE}" >> $GITHUB_ENV
        echo "CMESSAGE=${CMESSAGE}" >> $GITHUB_ENV
    
    # Construct Failure Message
    - if: failure()
      name: create Slack Failure message
      run: |
        MESSAGE="OCSP E2E Tests Execution failed for GCSPRE_DEV :red_circle: "
        CMESSAGE="Please check the artifacts in workflow run"
        echo "RESULT_MESSAGE=${MESSAGE}" >> $GITHUB_ENV
        echo "CMESSAGE=${CMESSAGE}" >> $GITHUB_ENV

    - name: Remove My IP From Key Vault Network Role
      if: ${{ always() }}
      run: |
        bash ./.github/scripts/remove-ip-from-key-vault-network-rule.sh \
          "${{ env.IPAddr }}" \
          "${{ env.SUBSCRIPTION_ID }}" \
          "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"

    - name: Remove WAF Policy Setting
      if: ${{ always() }}
      run: |
        bash ./.github/scripts/remove-custom-rule-from-waf.sh \
          "${{ env.SUBSCRIPTION_ID }}" \
          "${{ env.WAF_RESOURCE_GROUP_NAME }}" \
          "${{ env.WAF_POLICY_NAME }}"

    # Send Notification for E2E Tests to Slack
    - name: Send Notification to slack
      if: always()
      uses: tokorom/action-slack-incoming-webhook@master
      env:
        INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
          text: "***${{ env.RESULT_MESSAGE }}*** ${{ env.CMESSAGE}} [${{ github.repository }}] @ ${{ github.event_name }} "
          attachments: |
            [
              {
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "GitHub Actions URL",
                    "value": "https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]    
        