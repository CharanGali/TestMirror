name: Database Migration TypeORM
on:
  workflow_dispatch:
    inputs:
      subscription_code:
        description: 'Subscription code that container group should belong to.'
        required: true
        default: 'gcspre'
      app_code:
        description: 'App code that container group should belong to.'
        required: true
        default: 'main'
      region_code:
        description: 'Specify region code'
        default: 'japaneast'
        required: true
      DBMigration_Reason:
        description: 'Specify the reason for DB Migration'
        required: true
      SpecifyEnv:
        description: 'Specify the Env for DB Migration'
        required: true
        default: 'dev'
      on_or_off:
        description: 'Please confirm to proceed.'
        default: 'yes'
        required: true

jobs:
  db_migration:
    environment:
      name: ${{ github.event.inputs.subscription_code }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@master

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Github Action Environment Variables
        run: |
          IPAddr=$(curl -s https://checkip.amazonaws.com)
          ACCOUT_SHOW_RESULT=$(az account show)
          SUBSCRIPTION_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .id)"
          TENANT_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .homeTenantId)"
          KEY_VAULT_RESOURCE_GROUP_NAME="rg-${{ github.event.inputs.subscription_code }}-${{ github.event.inputs.SpecifyEnv }}-lacmn-kv"
          KEY_VAULT_ID=$(
            az resource list \
              --subscription ${SUBSCRIPTION_ID} \
              --resource-group ${KEY_VAULT_RESOURCE_GROUP_NAME} \
              --resource-type "Microsoft.KeyVault/vaults" \
              | jq -r .[0].id \
          )
          KEY_VAULT_NAME=$(basename ${KEY_VAULT_ID})
          echo "IPAddr=${IPAddr}" >> $GITHUB_ENV
          echo "SUBSCRIPTION_ID=${SUBSCRIPTION_ID}" >> $GITHUB_ENV
          echo "TENANT_ID=${TENANT_ID}" >> $GITHUB_ENV
          echo "KEY_VAULT_RESOURCE_GROUP_NAME=${KEY_VAULT_RESOURCE_GROUP_NAME}" >> $GITHUB_ENV
          echo "KEY_VAULT_ID=${KEY_VAULT_ID}" >> $GITHUB_ENV
          echo "KV_NAME=${KEY_VAULT_NAME}" >> $GITHUB_ENV

      - name: export envs
        run: |
          # updated value in place of input parameter(Subscription Code)
          SUBSCRIPTION_ID=$(bash ./azure/scripts/get-subscription-id.sh ${{ github.event.inputs.subscription_code }})
          {
            echo "RG_NAME=rg-${{ github.event.inputs.subscription_code }}-cmn-${{ github.event.inputs.app_code }}-cg"
            echo "CG_NAME=cg-${{ github.event.inputs.subscription_code }}-cmn-ocsptypeorm-${{ github.event.inputs.region_code }}"
            echo "SNAME=mysql-${{ github.event.inputs.subscription_code }}-cmn-shared-${{ github.event.inputs.region_code }}"
            echo "SUBSCRIPTION_ID=$SUBSCRIPTION_ID"
          }  >> "$GITHUB_ENV"

      - name: Key Vault Firewall Setting
        run: |
          bash ./.github/scripts/add-ip-to-key-vault-network-rule.sh \
            "${{ env.IPAddr }}" \
            "${{ env.SUBSCRIPTION_ID }}" \
            "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"

      - name: Fetch Secrets from Key Vault
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ env.KV_NAME }}
          secrets: "dpsMysqlDatabase, dpsMysqlUsername, dpsMysqlPassword, mysqlHost"
        id: kid

      - name: Prepare Docker Login Variables
        id: prepareDockerLoginVariables
        run: |
          ACR_NAME="cr${{ github.event.inputs.subscription_code }}cmnshared${{ github.event.inputs.region_code }}"
          ACR_LOGIN_SERVER=$( \
            az acr show \
              --subscription ${{ env.SUBSCRIPTION_ID }} \
              --name ${ACR_NAME} \
              --query loginServer \
              --output tsv \
          )
          ACR_CREDENTIAL=$( \
            az acr credential show \
              --subscription ${{ env.SUBSCRIPTION_ID }} \
              --name ${ACR_NAME} \
          )
          ACR_USERNAME=$(echo ${ACR_CREDENTIAL} | jq -r .username)
          Sub=${{ github.event.inputs.subscription_code }}
          if [[ "$Sub" == gcspre ]]; then
            ACR_PASSWORD=$(echo ${ACR_CREDENTIAL} | jq -r .passwords[0].value)
          else
            ACR_PASSWORD=$(echo ${ACR_CREDENTIAL} | jq -r .passwords[1].value)  
          fi
          echo "ACR_NAME=${ACR_NAME}" >> $GITHUB_ENV
          echo "acrLoginServer=${ACR_LOGIN_SERVER}" >> $GITHUB_ENV
          echo "acrUsername=${ACR_USERNAME}" >> $GITHUB_ENV
          echo "acrPassword=${ACR_PASSWORD}" >> $GITHUB_ENV

      - name: Set the Key Vault Vaules to ORM Configuration
        run : |
          REPO_NAME=${{ github.event.inputs.SpecifyEnv }}-ocspdb-migration:${GITHUB_SHA}
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          sed -i -e "s/\${GITHUBACTION_UNAME}/${{ steps.kid.outputs.dpsMysqlUsername }}/" ormconfig.js
          sed -i -e "s/\${GITHUBACTION_PNAME}/${{ steps.kid.outputs.dpsMysqlPassword }}/" ormconfig.js
          sed -i -e "s/\${GITHUBACTION_HNAME}/${{ steps.kid.outputs.mysqlHost }}/" ormconfig.js
          sed -i -e "s/\${GITHUBACTION_SNAME}/${{ env.SNAME }}/" ormconfig.js
          sed -i -e "s/\${GITHUBACTION_DNAME}/${{ steps.kid.outputs.dpsMysqlDatabase }}/" ormconfig.js
          sed -i -e "s/\${GITHUBACTION_DNAME}/${{ steps.kid.outputs.dpsMysqlDatabase }}/" ./Migrate/Migrate.sh
          sed -i -e "s/\${GITHUBACTION_DBMREASON}/${{ github.event.inputs.DBMigration_Reason }}/" package.json
          sed -i -e "s/\${GITHUBACTION_REPO}/$REPO_NAME/" ./azure/parameters/container-group.jsonc
          sed -i -e "s/\${GITHUBACTION_ACRL}/${{ env.acrLoginServer }}/" ./azure/parameters/container-group.jsonc
          sed -i -e "s/\${GITHUBACTION_ACRU}/${{ env.acrUsername }}/" ./azure/parameters/container-group.jsonc
          sed -i -e "s/\${GITHUBACTION_ACRP}/${{ env.acrPassword }}/" ./azure/parameters/container-group.jsonc

      - name: Login to Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.acrLoginServer }}
          username: ${{ env.acrUsername }}
          password: ${{ env.acrPassword }}

      - name: Build and Push Docker image
        run: |
          # Write the content to Docker Compose file 
          sed -i -e "s/\${KEY_VAULT_NAME_REPLACED_BY_GITHUBACTION}/${{ env.KV_NAME }}/" docker-compose.yml
          docker build . -f ./Migrate/Dockerfile -t ${{ env.acrLoginServer }}/${{ env.REPO_NAME }}
          docker push ${{ env.acrLoginServer }}/${{ env.REPO_NAME }}
          
      - name: Create Container and Start Migration
        if:  ${{ github.event_name == 'workflow_dispatch' }}
        run : |
          az account set --subscription ${{ env.SUBSCRIPTION_ID }}
          ON_OFF=${{ github.event.inputs.on_or_off }}

          # Resource Group Check
          rgExists=$(az group exists -n ${{ env.RG_NAME }})
          # Container Instance Check
          cgExists=$(az container list --query "length([?name == '$CG_NAME'].{Name: name})")

          # Record status if already present
          if [[ "$rgExists" == true && "$cgExists" == 1 ]]; then
              az container delete -n ${{ env.CG_NAME }} -g ${{ env.RG_NAME }} --yes
          fi

          # Start/Create Container Instance and Perform DB Migrate
          if [[ "$ON_OFF" == yes ]]; then
            cgExists=$(az container list --query "length([?name == '$CG_NAME'].{Name: name})")
            # Create if rg does not exist
            if [[ "$rgExists" != true || "$cgExists" == 0 ]]; then
              ENV_NAME=cmn
              REGION_CODE=${{ github.event.inputs.region_code }}
              SUBSCRIPTION_CODE=${{ github.event.inputs.subscription_code }}
              APP_CODE=${{ github.event.inputs.app_code }}
              /usr/bin/env bash ./azure/scripts/create-container-group.sh $ENV_NAME $REGION_CODE $SUBSCRIPTION_CODE $APP_CODE
              echo "RESULT=launched" >> "$GITHUB_ENV"
              exit 0
            fi
          fi

      - name: Analyse logs & Delete the container
        run : |        
          while :
          do
            az container logs --resource-group ${{ env.RG_NAME }} --name ${{ env.CG_NAME }} >> ./Migrate/Result.txt
            content=`cat ./Migrate/Result.txt`
            if [[ $content == *"Data Insertion Completed."* || $content == *"Migration Execution Completed."* ]]; then
              az container delete -n ${{ env.CG_NAME }} -g ${{ env.RG_NAME }} --yes
              az acr repository delete --name ${{ env.acrLoginServer }} --repository ${{ github.event.inputs.SpecifyEnv }}-ocspdb-migration --yes
              break
            elif [[ $content == *"Error Received"* ]]; then
              az container stop -n ${{ env.CG_NAME }} -g ${{ env.RG_NAME }}  
              break
            fi
          done

      - name: Get current date
        id: date
        run: |
          export TZ="Asia/Kolkata"
          echo "::set-output name=date::$(date +'%Y-%m-%d_%H-%M-%S')"

      - name: Archive Migration results
        uses: actions/upload-artifact@v2
        with:
          name: ocspdb-migration-report-${{ steps.date.outputs.date }}
          path: Migrate/Result.txt

      # Construct Slack Success Message
      - if: success()
        name: create Slack success message
        run: |
          MESSAGE="DB Migration Workflow Completed for OCSP ${{ github.event.inputs.subscription_code }}_${{ github.event.inputs.specifyEnv }} :white_check_mark: "
          echo "RESULT_MESSAGE=${MESSAGE}" >> $GITHUB_ENV
      
      # Construct Failure Message
      - if: failure()
        name: create Slack Failure message
        run: |
          MESSAGE="DB Migration Workflow failed for OCSP ${{ github.event.inputs.subscription_code }}_${{ github.event.inputs.specifyEnv }} :red_circle: "
          echo "RESULT_MESSAGE=${MESSAGE}" >> $GITHUB_ENV
      
      - name: Remove My IP From Key Vault Network Role
        if: ${{ always() }}
        run: |
          bash ./.github/scripts/remove-ip-from-key-vault-network-rule.sh \
            "${{ env.IPAddr }}" \
            "${{ env.SUBSCRIPTION_ID }}" \
            "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"    
      
      # Send Notification for E2E Tests to Slack
      - name: Send Notification to slack
        if: always()
        uses: tokorom/action-slack-incoming-webhook@master
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
            text: "***${{ env.RESULT_MESSAGE }}*** [${{ github.repository }}] @ ${{ github.event_name }} "
            attachments: |
              [
                {
                  "author_name": "${{ github.actor }}",
                  "author_icon": "${{ github.event.sender.avatar_url }}",
                  "fields": [
                    {
                      "title": "GitHub Actions URL",
                      "value": "https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]    
              