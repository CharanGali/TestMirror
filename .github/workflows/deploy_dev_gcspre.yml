name: (GCSPRE_DEV) Create OCSP for SmartCamera

on:
  push:
    branches:
     - 'camera_dev'
  workflow_dispatch:

# Set Environment Variables
env:
  APP_CODE: lacmn
  SUBSCRIPTION_CODE: gcspre
  REGION_CODE: japaneast
  ENV_NAME: dev

jobs:
  push-express-image:
    runs-on: ubuntu-latest
    environment:
      name: gcspre
    steps:
      - name: Checkout source code
        uses: actions/checkout@master

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Github Action Environment Variables
        run: |
          IPAddr=$(curl -s https://checkip.amazonaws.com)
          ACCOUT_SHOW_RESULT=$(az account show)
          SUBSCRIPTION_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .id)"
          TENANT_ID="$(echo ${ACCOUT_SHOW_RESULT} | jq -r .homeTenantId)"
          KEY_VAULT_RESOURCE_GROUP_NAME="rg-${{ env.SUBSCRIPTION_CODE }}-${{ env.ENV_NAME }}-${{ env.APP_CODE }}-kv"
          KEY_VAULT_ID=$(
            az resource list \
              --subscription ${SUBSCRIPTION_ID} \
              --resource-group ${KEY_VAULT_RESOURCE_GROUP_NAME} \
              --resource-type "Microsoft.KeyVault/vaults" \
              | jq -r .[0].id \
          )
          KEY_VAULT_NAME=$(basename ${KEY_VAULT_ID})
          echo "IPAddr=${IPAddr}" >> $GITHUB_ENV
          echo "SUBSCRIPTION_ID=${SUBSCRIPTION_ID}" >> $GITHUB_ENV
          echo "TENANT_ID=${TENANT_ID}" >> $GITHUB_ENV
          echo "KEY_VAULT_RESOURCE_GROUP_NAME=${KEY_VAULT_RESOURCE_GROUP_NAME}" >> $GITHUB_ENV
          echo "KEY_VAULT_ID=${KEY_VAULT_ID}" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=${KEY_VAULT_NAME}" >> $GITHUB_ENV

      - name: Prepare Docker Login Variables
        id: prepareDockerLoginVariables
        run: |
          ACR_NAME="cr${{ env.SUBSCRIPTION_CODE }}cmnshared${{ env.REGION_CODE }}"
          ACR_LOGIN_SERVER=$( \
            az acr show \
              --subscription ${{ env.SUBSCRIPTION_ID }} \
              --name ${ACR_NAME} \
              --query loginServer \
              --output tsv \
          )
          ACR_CREDENTIAL=$( \
            az acr credential show \
              --subscription ${{ env.SUBSCRIPTION_ID }} \
              --name ${ACR_NAME} \
          )
          ACR_USERNAME=$(echo ${ACR_CREDENTIAL} | jq -r .username)
          ACR_PASSWORD=$(echo ${ACR_CREDENTIAL} | jq -r .passwords[0].value)
          echo "ACR_NAME=${ACR_NAME}" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=${ACR_LOGIN_SERVER}" >> $GITHUB_ENV
          echo "ACR_USERNAME=${ACR_USERNAME}" >> $GITHUB_ENV
          echo "ACR_PASSWORD=${ACR_PASSWORD}" >> $GITHUB_ENV

      - name: Key Vault Firewall Setting
        run: |
          bash ./.github/scripts/add-ip-to-key-vault-network-rule.sh \
            "${{ env.IPAddr }}" \
            "${{ env.SUBSCRIPTION_ID }}" \
            "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"

      - name: AKS Firewall Setting
        run: |
          bash ./.github/scripts/add-ip-to-aks-network-rule.sh \
            "${{ env.ENV_NAME }}" \
            "${{ env.REGION_CODE }}" \
            "${{ env.SUBSCRIPTION_CODE }}" \
            "${{ env.SUBSCRIPTION_ID }}" \
            "${{ env.APP_CODE }}" \
            "${{ env.IPAddr }}"
     
      - name: Fetch secrets from KeyVault
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secrets: "mysqlHost, dpsMysqlUsername, dpsMysqlPassword, acmAccessKeyId, acmSecretAccessKey, sp-ocsp-tenant, sp-ocsp-appId, sp-ocsp-password"
        id: fetchFromKeyVault

      - name: Set env variables
        run: |
          source ./.github/scripts/set_secret_env.sh

      - name: Docker login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push image    
        run: |
          # Write the content to Docker Compose file
          sed -i -e "s/\${KEY_VAULT_NAME_REPLACED_BY_GITHUBACTION}/${{ env.KEY_VAULT_NAME }}/" docker-compose.yml
          sed -i -e "s/\${AZURE_CLIENT_ID_REPLACED_BY_GITHUBACTION}/${{ steps.fetchFromKeyVault.outputs.sp-ocsp-appId }}/" docker-compose.yml
          sed -i -e "s/\${AZURE_CLIENT_SECRET_REPLACED_BY_GITHUBACTION}/${{ steps.fetchFromKeyVault.outputs.sp-ocsp-password }}/" docker-compose.yml
          sed -i -e "s/\${AZURE_TENANT_ID_REPLACED_BY_GITHUBACTION}/${{ env.TENANT_ID }}/" docker-compose.yml
          OCSPREPO_NAME="${{ env.ENV_NAME }}-ss-base-ocsp:${GITHUB_SHA}"
          docker build . -t ${{ env.ACR_LOGIN_SERVER }}/${OCSPREPO_NAME}
          docker push ${{ env.ACR_LOGIN_SERVER }}/${OCSPREPO_NAME}

      - name: Set env
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF##*/} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z]//g')
          AWS_SECRET_ACCESS_KEY="${{ steps.fetchFromKeyVault.outputs.acmSecretAccessKey }}"
          AWS_ACCESS_KEY_ID="${{ steps.fetchFromKeyVault.outputs.acmAccessKeyId }}"
          source ./.github/scripts/set_env_gcspre.sh

          MYSQL_HOST="${{ steps.fetchFromKeyVault.outputs.mysqlHost }}"
          MYSQL_USERNAME="${{ steps.fetchFromKeyVault.outputs.dpsMysqlUsername }}"
          MYSQL_PASSWORD="${{ steps.fetchFromKeyVault.outputs.dpsMysqlPassword }}"
          TENANT_ID="${{ steps.fetchFromKeyVault.outputs.sp-ocsp-tenant }}"
          CLIENT_ID_KEYVAULT="${{ steps.fetchFromKeyVault.outputs.sp-ocsp-appId }}"
          CLIENT_SECRET_KEYVAULT="${{ steps.fetchFromKeyVault.outputs.sp-ocsp-password }}"
          ACR_LOGIN_SERVER="${{ env.ACR_LOGIN_SERVER }}"
          ACR_USERNAME="${{ env.ACR_USERNAME }}"
          ACR_PASSWORD="${{ env.ACR_PASSWORD }}"
          source ./.github/scripts/set_secret_env.sh

      - name: Set the target aks cluster
        uses: Azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: aks-${{ env.SUBSCRIPTION_CODE }}-${{ env.ENV_NAME }}-${{ env.APP_CODE }}-${{ env.REGION_CODE }}
          resource-group: rg-${{ env.SUBSCRIPTION_CODE }}-${{ env.ENV_NAME }}-${{ env.APP_CODE }}-aks

      - name: Deploy charts
        uses: azure/CLI@v1
        with:
          inlineScript: |
            bash ./k8s/deploy.sh -e ${{ env.ENV_NAME }} -p ${PREFIX} -a ${{ env.APP_CODE }} -s ${{ env.SUBSCRIPTION_CODE }} -r ${{ env.REGION_CODE }} -m ${{ env.MYSQL_HOST }}

      - name: Remove My IP From Key Vault Network Role
        if: ${{ always() }}
        run: |
          bash ./.github/scripts/remove-ip-from-key-vault-network-rule.sh \
            "${{ env.IPAddr }}" \
            "${{ env.SUBSCRIPTION_ID }}" \
            "${{ env.KEY_VAULT_RESOURCE_GROUP_NAME }}"

      - name: Remove IP From AKS Network Role
        if: ${{ always() }}
        run: |
          bash ./.github/scripts/remove-ip-from-aks-network-rule.sh \
            "${{ env.ENV_NAME }}" \
            "${{ env.REGION_CODE }}" \
            "${{ env.SUBSCRIPTION_CODE }}" \
            "${{ env.SUBSCRIPTION_ID }}" \
            "${{ env.APP_CODE }}" \
            "${{ env.IPAddr }}"

      - if: success()
        name: Post to slack(SUCCESS)
        uses: tokorom/action-slack-incoming-webhook@master
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: "azure deploy OCSP @ GCSPRE_DEV SUCCESS! :white_check_mark:"
          attachments: |
            [
              {
                "color": "${{ env.RESULT_COLOR }}",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "GitHub Actions URL",
                    "value": "https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]

      - if: failure()
        name: Post to slack(FAILURE)
        uses: tokorom/action-slack-incoming-webhook@master
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: "azure deploy OCSP @ GCSPRE_DEV FAILURE! :red_circle:"
          attachments: |
            [
              {
                "color": "${{ env.RESULT_COLOR }}",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
